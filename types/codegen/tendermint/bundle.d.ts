import * as _153 from "./crypto/proof";
import * as _154 from "./crypto/keys";
import * as _156 from "./abci/types";
import * as _157 from "./libs/bits/types";
import * as _158 from "./p2p/types";
import * as _159 from "./types/block";
import * as _160 from "./types/evidence";
import * as _161 from "./types/params";
import * as _162 from "./types/types";
import * as _163 from "./types/validator";
import * as _164 from "./version/types";
export declare namespace tendermint {
    const crypto: {
        Proof: {
            encode(message: _153.Proof, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _153.Proof;
            fromPartial(object: {
                total?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                index?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                leafHash?: Uint8Array;
                aunts?: Uint8Array[];
            }): _153.Proof;
        };
        ValueOp: {
            encode(message: _153.ValueOp, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _153.ValueOp;
            fromPartial(object: {
                key?: Uint8Array;
                proof?: {
                    total?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    leafHash?: Uint8Array;
                    aunts?: Uint8Array[];
                };
            }): _153.ValueOp;
        };
        DominoOp: {
            encode(message: _153.DominoOp, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _153.DominoOp;
            fromPartial(object: {
                key?: string;
                input?: string;
                output?: string;
            }): _153.DominoOp;
        };
        ProofOp: {
            encode(message: _153.ProofOp, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _153.ProofOp;
            fromPartial(object: {
                type?: string;
                key?: Uint8Array;
                data?: Uint8Array;
            }): _153.ProofOp;
        };
        ProofOps: {
            encode(message: _153.ProofOps, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _153.ProofOps;
            fromPartial(object: {
                ops?: {
                    type?: string;
                    key?: Uint8Array;
                    data?: Uint8Array;
                }[];
            }): _153.ProofOps;
        };
        PublicKey: {
            encode(message: _154.PublicKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _154.PublicKey;
            fromPartial(object: {
                ed25519?: Uint8Array;
                secp256k1?: Uint8Array;
            }): _154.PublicKey;
        };
    };
    const abci: {
        checkTxTypeFromJSON(object: any): _156.CheckTxType;
        checkTxTypeToJSON(object: _156.CheckTxType): string;
        responseOfferSnapshot_ResultFromJSON(object: any): _156.ResponseOfferSnapshot_Result;
        responseOfferSnapshot_ResultToJSON(object: _156.ResponseOfferSnapshot_Result): string;
        responseApplySnapshotChunk_ResultFromJSON(object: any): _156.ResponseApplySnapshotChunk_Result;
        responseApplySnapshotChunk_ResultToJSON(object: _156.ResponseApplySnapshotChunk_Result): string;
        evidenceTypeFromJSON(object: any): _156.EvidenceType;
        evidenceTypeToJSON(object: _156.EvidenceType): string;
        CheckTxType: typeof _156.CheckTxType;
        CheckTxTypeSDKType: typeof _156.CheckTxTypeSDKType;
        ResponseOfferSnapshot_Result: typeof _156.ResponseOfferSnapshot_Result;
        ResponseOfferSnapshot_ResultSDKType: typeof _156.ResponseOfferSnapshot_ResultSDKType;
        ResponseApplySnapshotChunk_Result: typeof _156.ResponseApplySnapshotChunk_Result;
        ResponseApplySnapshotChunk_ResultSDKType: typeof _156.ResponseApplySnapshotChunk_ResultSDKType;
        EvidenceType: typeof _156.EvidenceType;
        EvidenceTypeSDKType: typeof _156.EvidenceTypeSDKType;
        Request: {
            encode(message: _156.Request, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.Request;
            fromPartial(object: {
                echo?: {
                    message?: string;
                };
                flush?: {};
                info?: {
                    version?: string;
                    blockVersion?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    p2pVersion?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                setOption?: {
                    key?: string;
                    value?: string;
                };
                initChain?: {
                    time?: Date;
                    chainId?: string;
                    consensusParams?: {
                        block?: {
                            maxBytes?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            maxGas?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        evidence?: {
                            maxAgeNumBlocks?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            maxAgeDuration?: {
                                seconds?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                nanos?: number;
                            };
                            maxBytes?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        validator?: {
                            pubKeyTypes?: string[];
                        };
                        version?: {
                            appVersion?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                    };
                    validators?: {
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        power?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }[];
                    appStateBytes?: Uint8Array;
                    initialHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                query?: {
                    data?: Uint8Array;
                    path?: string;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    prove?: boolean;
                };
                beginBlock?: {
                    hash?: Uint8Array;
                    header?: {
                        version?: {
                            block?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            app?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        chainId?: string;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        time?: Date;
                        lastBlockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        lastCommitHash?: Uint8Array;
                        dataHash?: Uint8Array;
                        validatorsHash?: Uint8Array;
                        nextValidatorsHash?: Uint8Array;
                        consensusHash?: Uint8Array;
                        appHash?: Uint8Array;
                        lastResultsHash?: Uint8Array;
                        evidenceHash?: Uint8Array;
                        proposerAddress?: Uint8Array;
                    };
                    lastCommitInfo?: {
                        round?: number;
                        votes?: {
                            validator?: {
                                address?: Uint8Array;
                                power?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            };
                            signedLastBlock?: boolean;
                        }[];
                    };
                    byzantineValidators?: {
                        type?: _156.EvidenceType;
                        validator?: {
                            address?: Uint8Array;
                            power?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        time?: Date;
                        totalVotingPower?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }[];
                };
                checkTx?: {
                    tx?: Uint8Array;
                    type?: _156.CheckTxType;
                };
                deliverTx?: {
                    tx?: Uint8Array;
                };
                endBlock?: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                commit?: {};
                listSnapshots?: {};
                offerSnapshot?: {
                    snapshot?: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        format?: number;
                        chunks?: number;
                        hash?: Uint8Array;
                        metadata?: Uint8Array;
                    };
                    appHash?: Uint8Array;
                };
                loadSnapshotChunk?: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    format?: number;
                    chunk?: number;
                };
                applySnapshotChunk?: {
                    index?: number;
                    chunk?: Uint8Array;
                    sender?: string;
                };
            }): _156.Request;
        };
        RequestEcho: {
            encode(message: _156.RequestEcho, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestEcho;
            fromPartial(object: {
                message?: string;
            }): _156.RequestEcho;
        };
        RequestFlush: {
            encode(_: _156.RequestFlush, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestFlush;
            fromPartial(_: {}): _156.RequestFlush;
        };
        RequestInfo: {
            encode(message: _156.RequestInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestInfo;
            fromPartial(object: {
                version?: string;
                blockVersion?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                p2pVersion?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _156.RequestInfo;
        };
        RequestSetOption: {
            encode(message: _156.RequestSetOption, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestSetOption;
            fromPartial(object: {
                key?: string;
                value?: string;
            }): _156.RequestSetOption;
        };
        RequestInitChain: {
            encode(message: _156.RequestInitChain, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestInitChain;
            fromPartial(object: {
                time?: Date;
                chainId?: string;
                consensusParams?: {
                    block?: {
                        maxBytes?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        maxGas?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    evidence?: {
                        maxAgeNumBlocks?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        maxAgeDuration?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                        maxBytes?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    validator?: {
                        pubKeyTypes?: string[];
                    };
                    version?: {
                        appVersion?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                };
                validators?: {
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    power?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }[];
                appStateBytes?: Uint8Array;
                initialHeight?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _156.RequestInitChain;
        };
        RequestQuery: {
            encode(message: _156.RequestQuery, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestQuery;
            fromPartial(object: {
                data?: Uint8Array;
                path?: string;
                height?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                prove?: boolean;
            }): _156.RequestQuery;
        };
        RequestBeginBlock: {
            encode(message: _156.RequestBeginBlock, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestBeginBlock;
            fromPartial(object: {
                hash?: Uint8Array;
                header?: {
                    version?: {
                        block?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        app?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    chainId?: string;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    time?: Date;
                    lastBlockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    lastCommitHash?: Uint8Array;
                    dataHash?: Uint8Array;
                    validatorsHash?: Uint8Array;
                    nextValidatorsHash?: Uint8Array;
                    consensusHash?: Uint8Array;
                    appHash?: Uint8Array;
                    lastResultsHash?: Uint8Array;
                    evidenceHash?: Uint8Array;
                    proposerAddress?: Uint8Array;
                };
                lastCommitInfo?: {
                    round?: number;
                    votes?: {
                        validator?: {
                            address?: Uint8Array;
                            power?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        signedLastBlock?: boolean;
                    }[];
                };
                byzantineValidators?: {
                    type?: _156.EvidenceType;
                    validator?: {
                        address?: Uint8Array;
                        power?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    time?: Date;
                    totalVotingPower?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }[];
            }): _156.RequestBeginBlock;
        };
        RequestCheckTx: {
            encode(message: _156.RequestCheckTx, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestCheckTx;
            fromPartial(object: {
                tx?: Uint8Array;
                type?: _156.CheckTxType;
            }): _156.RequestCheckTx;
        };
        RequestDeliverTx: {
            encode(message: _156.RequestDeliverTx, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestDeliverTx;
            fromPartial(object: {
                tx?: Uint8Array;
            }): _156.RequestDeliverTx;
        };
        RequestEndBlock: {
            encode(message: _156.RequestEndBlock, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestEndBlock;
            fromPartial(object: {
                height?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _156.RequestEndBlock;
        };
        RequestCommit: {
            encode(_: _156.RequestCommit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestCommit;
            fromPartial(_: {}): _156.RequestCommit;
        };
        RequestListSnapshots: {
            encode(_: _156.RequestListSnapshots, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestListSnapshots;
            fromPartial(_: {}): _156.RequestListSnapshots;
        };
        RequestOfferSnapshot: {
            encode(message: _156.RequestOfferSnapshot, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestOfferSnapshot;
            fromPartial(object: {
                snapshot?: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    format?: number;
                    chunks?: number;
                    hash?: Uint8Array;
                    metadata?: Uint8Array;
                };
                appHash?: Uint8Array;
            }): _156.RequestOfferSnapshot;
        };
        RequestLoadSnapshotChunk: {
            encode(message: _156.RequestLoadSnapshotChunk, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestLoadSnapshotChunk;
            fromPartial(object: {
                height?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                format?: number;
                chunk?: number;
            }): _156.RequestLoadSnapshotChunk;
        };
        RequestApplySnapshotChunk: {
            encode(message: _156.RequestApplySnapshotChunk, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.RequestApplySnapshotChunk;
            fromPartial(object: {
                index?: number;
                chunk?: Uint8Array;
                sender?: string;
            }): _156.RequestApplySnapshotChunk;
        };
        Response: {
            encode(message: _156.Response, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.Response;
            fromPartial(object: {
                exception?: {
                    error?: string;
                };
                echo?: {
                    message?: string;
                };
                flush?: {};
                info?: {
                    data?: string;
                    version?: string;
                    appVersion?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    lastBlockHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    lastBlockAppHash?: Uint8Array;
                };
                setOption?: {
                    code?: number;
                    log?: string;
                    info?: string;
                };
                initChain?: {
                    consensusParams?: {
                        block?: {
                            maxBytes?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            maxGas?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        evidence?: {
                            maxAgeNumBlocks?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            maxAgeDuration?: {
                                seconds?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                nanos?: number;
                            };
                            maxBytes?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        validator?: {
                            pubKeyTypes?: string[];
                        };
                        version?: {
                            appVersion?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                    };
                    validators?: {
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        power?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }[];
                    appHash?: Uint8Array;
                };
                query?: {
                    code?: number;
                    log?: string;
                    info?: string;
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    key?: Uint8Array;
                    value?: Uint8Array;
                    proofOps?: {
                        ops?: {
                            type?: string;
                            key?: Uint8Array;
                            data?: Uint8Array;
                        }[];
                    };
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    codespace?: string;
                };
                beginBlock?: {
                    events?: {
                        type?: string;
                        attributes?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                            index?: boolean;
                        }[];
                    }[];
                };
                checkTx?: {
                    code?: number;
                    data?: Uint8Array;
                    log?: string;
                    info?: string;
                    gasWanted?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    gasUsed?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    events?: {
                        type?: string;
                        attributes?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                            index?: boolean;
                        }[];
                    }[];
                    codespace?: string;
                    sender?: string;
                    priority?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    mempoolError?: string;
                };
                deliverTx?: {
                    code?: number;
                    data?: Uint8Array;
                    log?: string;
                    info?: string;
                    gasWanted?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    gasUsed?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    events?: {
                        type?: string;
                        attributes?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                            index?: boolean;
                        }[];
                    }[];
                    codespace?: string;
                };
                endBlock?: {
                    validatorUpdates?: {
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        power?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }[];
                    consensusParamUpdates?: {
                        block?: {
                            maxBytes?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            maxGas?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        evidence?: {
                            maxAgeNumBlocks?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            maxAgeDuration?: {
                                seconds?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                nanos?: number;
                            };
                            maxBytes?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        validator?: {
                            pubKeyTypes?: string[];
                        };
                        version?: {
                            appVersion?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                    };
                    events?: {
                        type?: string;
                        attributes?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                            index?: boolean;
                        }[];
                    }[];
                };
                commit?: {
                    data?: Uint8Array;
                    retainHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                listSnapshots?: {
                    snapshots?: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        format?: number;
                        chunks?: number;
                        hash?: Uint8Array;
                        metadata?: Uint8Array;
                    }[];
                };
                offerSnapshot?: {
                    result?: _156.ResponseOfferSnapshot_Result;
                };
                loadSnapshotChunk?: {
                    chunk?: Uint8Array;
                };
                applySnapshotChunk?: {
                    result?: _156.ResponseApplySnapshotChunk_Result;
                    refetchChunks?: number[];
                    rejectSenders?: string[];
                };
            }): _156.Response;
        };
        ResponseException: {
            encode(message: _156.ResponseException, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseException;
            fromPartial(object: {
                error?: string;
            }): _156.ResponseException;
        };
        ResponseEcho: {
            encode(message: _156.ResponseEcho, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseEcho;
            fromPartial(object: {
                message?: string;
            }): _156.ResponseEcho;
        };
        ResponseFlush: {
            encode(_: _156.ResponseFlush, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseFlush;
            fromPartial(_: {}): _156.ResponseFlush;
        };
        ResponseInfo: {
            encode(message: _156.ResponseInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseInfo;
            fromPartial(object: {
                data?: string;
                version?: string;
                appVersion?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                lastBlockHeight?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                lastBlockAppHash?: Uint8Array;
            }): _156.ResponseInfo;
        };
        ResponseSetOption: {
            encode(message: _156.ResponseSetOption, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseSetOption;
            fromPartial(object: {
                code?: number;
                log?: string;
                info?: string;
            }): _156.ResponseSetOption;
        };
        ResponseInitChain: {
            encode(message: _156.ResponseInitChain, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseInitChain;
            fromPartial(object: {
                consensusParams?: {
                    block?: {
                        maxBytes?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        maxGas?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    evidence?: {
                        maxAgeNumBlocks?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        maxAgeDuration?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                        maxBytes?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    validator?: {
                        pubKeyTypes?: string[];
                    };
                    version?: {
                        appVersion?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                };
                validators?: {
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    power?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }[];
                appHash?: Uint8Array;
            }): _156.ResponseInitChain;
        };
        ResponseQuery: {
            encode(message: _156.ResponseQuery, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseQuery;
            fromPartial(object: {
                code?: number;
                log?: string;
                info?: string;
                index?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                key?: Uint8Array;
                value?: Uint8Array;
                proofOps?: {
                    ops?: {
                        type?: string;
                        key?: Uint8Array;
                        data?: Uint8Array;
                    }[];
                };
                height?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                codespace?: string;
            }): _156.ResponseQuery;
        };
        ResponseBeginBlock: {
            encode(message: _156.ResponseBeginBlock, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseBeginBlock;
            fromPartial(object: {
                events?: {
                    type?: string;
                    attributes?: {
                        key?: Uint8Array;
                        value?: Uint8Array;
                        index?: boolean;
                    }[];
                }[];
            }): _156.ResponseBeginBlock;
        };
        ResponseCheckTx: {
            encode(message: _156.ResponseCheckTx, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseCheckTx;
            fromPartial(object: {
                code?: number;
                data?: Uint8Array;
                log?: string;
                info?: string;
                gasWanted?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                gasUsed?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                events?: {
                    type?: string;
                    attributes?: {
                        key?: Uint8Array;
                        value?: Uint8Array;
                        index?: boolean;
                    }[];
                }[];
                codespace?: string;
                sender?: string;
                priority?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                mempoolError?: string;
            }): _156.ResponseCheckTx;
        };
        ResponseDeliverTx: {
            encode(message: _156.ResponseDeliverTx, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseDeliverTx;
            fromPartial(object: {
                code?: number;
                data?: Uint8Array;
                log?: string;
                info?: string;
                gasWanted?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                gasUsed?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                events?: {
                    type?: string;
                    attributes?: {
                        key?: Uint8Array;
                        value?: Uint8Array;
                        index?: boolean;
                    }[];
                }[];
                codespace?: string;
            }): _156.ResponseDeliverTx;
        };
        ResponseEndBlock: {
            encode(message: _156.ResponseEndBlock, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseEndBlock;
            fromPartial(object: {
                validatorUpdates?: {
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    power?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }[];
                consensusParamUpdates?: {
                    block?: {
                        maxBytes?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        maxGas?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    evidence?: {
                        maxAgeNumBlocks?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        maxAgeDuration?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                        maxBytes?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    validator?: {
                        pubKeyTypes?: string[];
                    };
                    version?: {
                        appVersion?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                };
                events?: {
                    type?: string;
                    attributes?: {
                        key?: Uint8Array;
                        value?: Uint8Array;
                        index?: boolean;
                    }[];
                }[];
            }): _156.ResponseEndBlock;
        };
        ResponseCommit: {
            encode(message: _156.ResponseCommit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseCommit;
            fromPartial(object: {
                data?: Uint8Array;
                retainHeight?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _156.ResponseCommit;
        };
        ResponseListSnapshots: {
            encode(message: _156.ResponseListSnapshots, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseListSnapshots;
            fromPartial(object: {
                snapshots?: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    format?: number;
                    chunks?: number;
                    hash?: Uint8Array;
                    metadata?: Uint8Array;
                }[];
            }): _156.ResponseListSnapshots;
        };
        ResponseOfferSnapshot: {
            encode(message: _156.ResponseOfferSnapshot, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseOfferSnapshot;
            fromPartial(object: {
                result?: _156.ResponseOfferSnapshot_Result;
            }): _156.ResponseOfferSnapshot;
        };
        ResponseLoadSnapshotChunk: {
            encode(message: _156.ResponseLoadSnapshotChunk, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseLoadSnapshotChunk;
            fromPartial(object: {
                chunk?: Uint8Array;
            }): _156.ResponseLoadSnapshotChunk;
        };
        ResponseApplySnapshotChunk: {
            encode(message: _156.ResponseApplySnapshotChunk, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ResponseApplySnapshotChunk;
            fromPartial(object: {
                result?: _156.ResponseApplySnapshotChunk_Result;
                refetchChunks?: number[];
                rejectSenders?: string[];
            }): _156.ResponseApplySnapshotChunk;
        };
        ConsensusParams: {
            encode(message: _156.ConsensusParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ConsensusParams;
            fromPartial(object: {
                block?: {
                    maxBytes?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    maxGas?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                evidence?: {
                    maxAgeNumBlocks?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    maxAgeDuration?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        nanos?: number;
                    };
                    maxBytes?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                validator?: {
                    pubKeyTypes?: string[];
                };
                version?: {
                    appVersion?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
            }): _156.ConsensusParams;
        };
        BlockParams: {
            encode(message: _156.BlockParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.BlockParams;
            fromPartial(object: {
                maxBytes?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                maxGas?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _156.BlockParams;
        };
        LastCommitInfo: {
            encode(message: _156.LastCommitInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.LastCommitInfo;
            fromPartial(object: {
                round?: number;
                votes?: {
                    validator?: {
                        address?: Uint8Array;
                        power?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    signedLastBlock?: boolean;
                }[];
            }): _156.LastCommitInfo;
        };
        Event: {
            encode(message: _156.Event, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.Event;
            fromPartial(object: {
                type?: string;
                attributes?: {
                    key?: Uint8Array;
                    value?: Uint8Array;
                    index?: boolean;
                }[];
            }): _156.Event;
        };
        EventAttribute: {
            encode(message: _156.EventAttribute, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.EventAttribute;
            fromPartial(object: {
                key?: Uint8Array;
                value?: Uint8Array;
                index?: boolean;
            }): _156.EventAttribute;
        };
        TxResult: {
            encode(message: _156.TxResult, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.TxResult;
            fromPartial(object: {
                height?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                index?: number;
                tx?: Uint8Array;
                result?: {
                    code?: number;
                    data?: Uint8Array;
                    log?: string;
                    info?: string;
                    gasWanted?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    gasUsed?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    events?: {
                        type?: string;
                        attributes?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                            index?: boolean;
                        }[];
                    }[];
                    codespace?: string;
                };
            }): _156.TxResult;
        };
        Validator: {
            encode(message: _156.Validator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.Validator;
            fromPartial(object: {
                address?: Uint8Array;
                power?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _156.Validator;
        };
        ValidatorUpdate: {
            encode(message: _156.ValidatorUpdate, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.ValidatorUpdate;
            fromPartial(object: {
                pubKey?: {
                    ed25519?: Uint8Array;
                    secp256k1?: Uint8Array;
                };
                power?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _156.ValidatorUpdate;
        };
        VoteInfo: {
            encode(message: _156.VoteInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.VoteInfo;
            fromPartial(object: {
                validator?: {
                    address?: Uint8Array;
                    power?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                signedLastBlock?: boolean;
            }): _156.VoteInfo;
        };
        Evidence: {
            encode(message: _156.Evidence, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.Evidence;
            fromPartial(object: {
                type?: _156.EvidenceType;
                validator?: {
                    address?: Uint8Array;
                    power?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                height?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                time?: Date;
                totalVotingPower?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _156.Evidence;
        };
        Snapshot: {
            encode(message: _156.Snapshot, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _156.Snapshot;
            fromPartial(object: {
                height?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                format?: number;
                chunks?: number;
                hash?: Uint8Array;
                metadata?: Uint8Array;
            }): _156.Snapshot;
        };
    };
    namespace libs {
        const bits: {
            BitArray: {
                encode(message: _157.BitArray, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _157.BitArray;
                fromPartial(object: {
                    bits?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    elems?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    }[];
                }): _157.BitArray;
            };
        };
    }
    const p2p: {
        NetAddress: {
            encode(message: _158.NetAddress, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _158.NetAddress;
            fromPartial(object: {
                id?: string;
                ip?: string;
                port?: number;
            }): _158.NetAddress;
        };
        ProtocolVersion: {
            encode(message: _158.ProtocolVersion, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _158.ProtocolVersion;
            fromPartial(object: {
                p2p?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                block?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                app?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _158.ProtocolVersion;
        };
        DefaultNodeInfo: {
            encode(message: _158.DefaultNodeInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _158.DefaultNodeInfo;
            fromPartial(object: {
                protocolVersion?: {
                    p2p?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    block?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    app?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                defaultNodeId?: string;
                listenAddr?: string;
                network?: string;
                version?: string;
                channels?: Uint8Array;
                moniker?: string;
                other?: {
                    txIndex?: string;
                    rpcAddress?: string;
                };
            }): _158.DefaultNodeInfo;
        };
        DefaultNodeInfoOther: {
            encode(message: _158.DefaultNodeInfoOther, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _158.DefaultNodeInfoOther;
            fromPartial(object: {
                txIndex?: string;
                rpcAddress?: string;
            }): _158.DefaultNodeInfoOther;
        };
    };
    const types: {
        ValidatorSet: {
            encode(message: _163.ValidatorSet, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _163.ValidatorSet;
            fromPartial(object: {
                validators?: {
                    address?: Uint8Array;
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    votingPower?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    proposerPriority?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }[];
                proposer?: {
                    address?: Uint8Array;
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    votingPower?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    proposerPriority?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                totalVotingPower?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _163.ValidatorSet;
        };
        Validator: {
            encode(message: _163.Validator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _163.Validator;
            fromPartial(object: {
                address?: Uint8Array;
                pubKey?: {
                    ed25519?: Uint8Array;
                    secp256k1?: Uint8Array;
                };
                votingPower?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                proposerPriority?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _163.Validator;
        };
        SimpleValidator: {
            encode(message: _163.SimpleValidator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _163.SimpleValidator;
            fromPartial(object: {
                pubKey?: {
                    ed25519?: Uint8Array;
                    secp256k1?: Uint8Array;
                };
                votingPower?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _163.SimpleValidator;
        };
        blockIDFlagFromJSON(object: any): _162.BlockIDFlag;
        blockIDFlagToJSON(object: _162.BlockIDFlag): string;
        signedMsgTypeFromJSON(object: any): _162.SignedMsgType;
        signedMsgTypeToJSON(object: _162.SignedMsgType): string;
        BlockIDFlag: typeof _162.BlockIDFlag;
        BlockIDFlagSDKType: typeof _162.BlockIDFlagSDKType;
        SignedMsgType: typeof _162.SignedMsgType;
        SignedMsgTypeSDKType: typeof _162.SignedMsgTypeSDKType;
        PartSetHeader: {
            encode(message: _162.PartSetHeader, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.PartSetHeader;
            fromPartial(object: {
                total?: number;
                hash?: Uint8Array;
            }): _162.PartSetHeader;
        };
        Part: {
            encode(message: _162.Part, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.Part;
            fromPartial(object: {
                index?: number;
                bytes?: Uint8Array;
                proof?: {
                    total?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    leafHash?: Uint8Array;
                    aunts?: Uint8Array[];
                };
            }): _162.Part;
        };
        BlockID: {
            encode(message: _162.BlockID, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.BlockID;
            fromPartial(object: {
                hash?: Uint8Array;
                partSetHeader?: {
                    total?: number;
                    hash?: Uint8Array;
                };
            }): _162.BlockID;
        };
        Header: {
            encode(message: _162.Header, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.Header;
            fromPartial(object: {
                version?: {
                    block?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    app?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                chainId?: string;
                height?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                time?: Date;
                lastBlockId?: {
                    hash?: Uint8Array;
                    partSetHeader?: {
                        total?: number;
                        hash?: Uint8Array;
                    };
                };
                lastCommitHash?: Uint8Array;
                dataHash?: Uint8Array;
                validatorsHash?: Uint8Array;
                nextValidatorsHash?: Uint8Array;
                consensusHash?: Uint8Array;
                appHash?: Uint8Array;
                lastResultsHash?: Uint8Array;
                evidenceHash?: Uint8Array;
                proposerAddress?: Uint8Array;
            }): _162.Header;
        };
        Data: {
            encode(message: _162.Data, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.Data;
            fromPartial(object: {
                txs?: Uint8Array[];
            }): _162.Data;
        };
        Vote: {
            encode(message: _162.Vote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.Vote;
            fromPartial(object: {
                type?: _162.SignedMsgType;
                height?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                round?: number;
                blockId?: {
                    hash?: Uint8Array;
                    partSetHeader?: {
                        total?: number;
                        hash?: Uint8Array;
                    };
                };
                timestamp?: Date;
                validatorAddress?: Uint8Array;
                validatorIndex?: number;
                signature?: Uint8Array;
            }): _162.Vote;
        };
        Commit: {
            encode(message: _162.Commit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.Commit;
            fromPartial(object: {
                height?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                round?: number;
                blockId?: {
                    hash?: Uint8Array;
                    partSetHeader?: {
                        total?: number;
                        hash?: Uint8Array;
                    };
                };
                signatures?: {
                    blockIdFlag?: _162.BlockIDFlag;
                    validatorAddress?: Uint8Array;
                    timestamp?: Date;
                    signature?: Uint8Array;
                }[];
            }): _162.Commit;
        };
        CommitSig: {
            encode(message: _162.CommitSig, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.CommitSig;
            fromPartial(object: {
                blockIdFlag?: _162.BlockIDFlag;
                validatorAddress?: Uint8Array;
                timestamp?: Date;
                signature?: Uint8Array;
            }): _162.CommitSig;
        };
        Proposal: {
            encode(message: _162.Proposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.Proposal;
            fromPartial(object: {
                type?: _162.SignedMsgType;
                height?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                round?: number;
                polRound?: number;
                blockId?: {
                    hash?: Uint8Array;
                    partSetHeader?: {
                        total?: number;
                        hash?: Uint8Array;
                    };
                };
                timestamp?: Date;
                signature?: Uint8Array;
            }): _162.Proposal;
        };
        SignedHeader: {
            encode(message: _162.SignedHeader, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.SignedHeader;
            fromPartial(object: {
                header?: {
                    version?: {
                        block?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        app?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    chainId?: string;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    time?: Date;
                    lastBlockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    lastCommitHash?: Uint8Array;
                    dataHash?: Uint8Array;
                    validatorsHash?: Uint8Array;
                    nextValidatorsHash?: Uint8Array;
                    consensusHash?: Uint8Array;
                    appHash?: Uint8Array;
                    lastResultsHash?: Uint8Array;
                    evidenceHash?: Uint8Array;
                    proposerAddress?: Uint8Array;
                };
                commit?: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    round?: number;
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    signatures?: {
                        blockIdFlag?: _162.BlockIDFlag;
                        validatorAddress?: Uint8Array;
                        timestamp?: Date;
                        signature?: Uint8Array;
                    }[];
                };
            }): _162.SignedHeader;
        };
        LightBlock: {
            encode(message: _162.LightBlock, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.LightBlock;
            fromPartial(object: {
                signedHeader?: {
                    header?: {
                        version?: {
                            block?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            app?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        chainId?: string;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        time?: Date;
                        lastBlockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        lastCommitHash?: Uint8Array;
                        dataHash?: Uint8Array;
                        validatorsHash?: Uint8Array;
                        nextValidatorsHash?: Uint8Array;
                        consensusHash?: Uint8Array;
                        appHash?: Uint8Array;
                        lastResultsHash?: Uint8Array;
                        evidenceHash?: Uint8Array;
                        proposerAddress?: Uint8Array;
                    };
                    commit?: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        round?: number;
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        signatures?: {
                            blockIdFlag?: _162.BlockIDFlag;
                            validatorAddress?: Uint8Array;
                            timestamp?: Date;
                            signature?: Uint8Array;
                        }[];
                    };
                };
                validatorSet?: {
                    validators?: {
                        address?: Uint8Array;
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        votingPower?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        proposerPriority?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }[];
                    proposer?: {
                        address?: Uint8Array;
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        votingPower?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        proposerPriority?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    totalVotingPower?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
            }): _162.LightBlock;
        };
        BlockMeta: {
            encode(message: _162.BlockMeta, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.BlockMeta;
            fromPartial(object: {
                blockId?: {
                    hash?: Uint8Array;
                    partSetHeader?: {
                        total?: number;
                        hash?: Uint8Array;
                    };
                };
                blockSize?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                header?: {
                    version?: {
                        block?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        app?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    chainId?: string;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    time?: Date;
                    lastBlockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    lastCommitHash?: Uint8Array;
                    dataHash?: Uint8Array;
                    validatorsHash?: Uint8Array;
                    nextValidatorsHash?: Uint8Array;
                    consensusHash?: Uint8Array;
                    appHash?: Uint8Array;
                    lastResultsHash?: Uint8Array;
                    evidenceHash?: Uint8Array;
                    proposerAddress?: Uint8Array;
                };
                numTxs?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _162.BlockMeta;
        };
        TxProof: {
            encode(message: _162.TxProof, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _162.TxProof;
            fromPartial(object: {
                rootHash?: Uint8Array;
                data?: Uint8Array;
                proof?: {
                    total?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    leafHash?: Uint8Array;
                    aunts?: Uint8Array[];
                };
            }): _162.TxProof;
        };
        ConsensusParams: {
            encode(message: _161.ConsensusParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _161.ConsensusParams;
            fromPartial(object: {
                block?: {
                    maxBytes?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    maxGas?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    timeIotaMs?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                evidence?: {
                    maxAgeNumBlocks?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    maxAgeDuration?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        nanos?: number;
                    };
                    maxBytes?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
                validator?: {
                    pubKeyTypes?: string[];
                };
                version?: {
                    appVersion?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                };
            }): _161.ConsensusParams;
        };
        BlockParams: {
            encode(message: _161.BlockParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _161.BlockParams;
            fromPartial(object: {
                maxBytes?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                maxGas?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                timeIotaMs?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _161.BlockParams;
        };
        EvidenceParams: {
            encode(message: _161.EvidenceParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _161.EvidenceParams;
            fromPartial(object: {
                maxAgeNumBlocks?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                maxAgeDuration?: {
                    seconds?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    nanos?: number;
                };
                maxBytes?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _161.EvidenceParams;
        };
        ValidatorParams: {
            encode(message: _161.ValidatorParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _161.ValidatorParams;
            fromPartial(object: {
                pubKeyTypes?: string[];
            }): _161.ValidatorParams;
        };
        VersionParams: {
            encode(message: _161.VersionParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _161.VersionParams;
            fromPartial(object: {
                appVersion?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _161.VersionParams;
        };
        HashedParams: {
            encode(message: _161.HashedParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _161.HashedParams;
            fromPartial(object: {
                blockMaxBytes?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                blockMaxGas?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _161.HashedParams;
        };
        Evidence: {
            encode(message: _160.Evidence, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _160.Evidence;
            fromPartial(object: {
                duplicateVoteEvidence?: {
                    voteA?: {
                        type?: _162.SignedMsgType;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        round?: number;
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        timestamp?: Date;
                        validatorAddress?: Uint8Array;
                        validatorIndex?: number;
                        signature?: Uint8Array;
                    };
                    voteB?: {
                        type?: _162.SignedMsgType;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        round?: number;
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        timestamp?: Date;
                        validatorAddress?: Uint8Array;
                        validatorIndex?: number;
                        signature?: Uint8Array;
                    };
                    totalVotingPower?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    validatorPower?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    timestamp?: Date;
                };
                lightClientAttackEvidence?: {
                    conflictingBlock?: {
                        signedHeader?: {
                            header?: {
                                version?: {
                                    block?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    app?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                };
                                chainId?: string;
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            commit?: {
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: _162.BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            };
                        };
                        validatorSet?: {
                            validators?: {
                                address?: Uint8Array;
                                pubKey?: {
                                    ed25519?: Uint8Array;
                                    secp256k1?: Uint8Array;
                                };
                                votingPower?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                proposerPriority?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            }[];
                            proposer?: {
                                address?: Uint8Array;
                                pubKey?: {
                                    ed25519?: Uint8Array;
                                    secp256k1?: Uint8Array;
                                };
                                votingPower?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                proposerPriority?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            };
                            totalVotingPower?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                    };
                    commonHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    byzantineValidators?: {
                        address?: Uint8Array;
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        votingPower?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        proposerPriority?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }[];
                    totalVotingPower?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    timestamp?: Date;
                };
            }): _160.Evidence;
        };
        DuplicateVoteEvidence: {
            encode(message: _160.DuplicateVoteEvidence, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _160.DuplicateVoteEvidence;
            fromPartial(object: {
                voteA?: {
                    type?: _162.SignedMsgType;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    round?: number;
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    timestamp?: Date;
                    validatorAddress?: Uint8Array;
                    validatorIndex?: number;
                    signature?: Uint8Array;
                };
                voteB?: {
                    type?: _162.SignedMsgType;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    round?: number;
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    timestamp?: Date;
                    validatorAddress?: Uint8Array;
                    validatorIndex?: number;
                    signature?: Uint8Array;
                };
                totalVotingPower?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                validatorPower?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                timestamp?: Date;
            }): _160.DuplicateVoteEvidence;
        };
        LightClientAttackEvidence: {
            encode(message: _160.LightClientAttackEvidence, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _160.LightClientAttackEvidence;
            fromPartial(object: {
                conflictingBlock?: {
                    signedHeader?: {
                        header?: {
                            version?: {
                                block?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                app?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            };
                            chainId?: string;
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        };
                        commit?: {
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            signatures?: {
                                blockIdFlag?: _162.BlockIDFlag;
                                validatorAddress?: Uint8Array;
                                timestamp?: Date;
                                signature?: Uint8Array;
                            }[];
                        };
                    };
                    validatorSet?: {
                        validators?: {
                            address?: Uint8Array;
                            pubKey?: {
                                ed25519?: Uint8Array;
                                secp256k1?: Uint8Array;
                            };
                            votingPower?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            proposerPriority?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        }[];
                        proposer?: {
                            address?: Uint8Array;
                            pubKey?: {
                                ed25519?: Uint8Array;
                                secp256k1?: Uint8Array;
                            };
                            votingPower?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            proposerPriority?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        totalVotingPower?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                };
                commonHeight?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                byzantineValidators?: {
                    address?: Uint8Array;
                    pubKey?: {
                        ed25519?: Uint8Array;
                        secp256k1?: Uint8Array;
                    };
                    votingPower?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    proposerPriority?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }[];
                totalVotingPower?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                timestamp?: Date;
            }): _160.LightClientAttackEvidence;
        };
        EvidenceList: {
            encode(message: _160.EvidenceList, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _160.EvidenceList;
            fromPartial(object: {
                evidence?: {
                    duplicateVoteEvidence?: {
                        voteA?: {
                            type?: _162.SignedMsgType;
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            timestamp?: Date;
                            validatorAddress?: Uint8Array;
                            validatorIndex?: number;
                            signature?: Uint8Array;
                        };
                        voteB?: {
                            type?: _162.SignedMsgType;
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            timestamp?: Date;
                            validatorAddress?: Uint8Array;
                            validatorIndex?: number;
                            signature?: Uint8Array;
                        };
                        totalVotingPower?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        validatorPower?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        timestamp?: Date;
                    };
                    lightClientAttackEvidence?: {
                        conflictingBlock?: {
                            signedHeader?: {
                                header?: {
                                    version?: {
                                        block?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        app?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                    };
                                    chainId?: string;
                                    height?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    time?: Date;
                                    lastBlockId?: {
                                        hash?: Uint8Array;
                                        partSetHeader?: {
                                            total?: number;
                                            hash?: Uint8Array;
                                        };
                                    };
                                    lastCommitHash?: Uint8Array;
                                    dataHash?: Uint8Array;
                                    validatorsHash?: Uint8Array;
                                    nextValidatorsHash?: Uint8Array;
                                    consensusHash?: Uint8Array;
                                    appHash?: Uint8Array;
                                    lastResultsHash?: Uint8Array;
                                    evidenceHash?: Uint8Array;
                                    proposerAddress?: Uint8Array;
                                };
                                commit?: {
                                    height?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    round?: number;
                                    blockId?: {
                                        hash?: Uint8Array;
                                        partSetHeader?: {
                                            total?: number;
                                            hash?: Uint8Array;
                                        };
                                    };
                                    signatures?: {
                                        blockIdFlag?: _162.BlockIDFlag;
                                        validatorAddress?: Uint8Array;
                                        timestamp?: Date;
                                        signature?: Uint8Array;
                                    }[];
                                };
                            };
                            validatorSet?: {
                                validators?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    proposerPriority?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                }[];
                                proposer?: {
                                    address?: Uint8Array;
                                    pubKey?: {
                                        ed25519?: Uint8Array;
                                        secp256k1?: Uint8Array;
                                    };
                                    votingPower?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    proposerPriority?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                };
                                totalVotingPower?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            };
                        };
                        commonHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        byzantineValidators?: {
                            address?: Uint8Array;
                            pubKey?: {
                                ed25519?: Uint8Array;
                                secp256k1?: Uint8Array;
                            };
                            votingPower?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            proposerPriority?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        }[];
                        totalVotingPower?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        timestamp?: Date;
                    };
                }[];
            }): _160.EvidenceList;
        };
        Block: {
            encode(message: _159.Block, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _159.Block;
            fromPartial(object: {
                header?: {
                    version?: {
                        block?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        app?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    chainId?: string;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    time?: Date;
                    lastBlockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    lastCommitHash?: Uint8Array;
                    dataHash?: Uint8Array;
                    validatorsHash?: Uint8Array;
                    nextValidatorsHash?: Uint8Array;
                    consensusHash?: Uint8Array;
                    appHash?: Uint8Array;
                    lastResultsHash?: Uint8Array;
                    evidenceHash?: Uint8Array;
                    proposerAddress?: Uint8Array;
                };
                data?: {
                    txs?: Uint8Array[];
                };
                evidence?: {
                    evidence?: {
                        duplicateVoteEvidence?: {
                            voteA?: {
                                type?: _162.SignedMsgType;
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                timestamp?: Date;
                                validatorAddress?: Uint8Array;
                                validatorIndex?: number;
                                signature?: Uint8Array;
                            };
                            voteB?: {
                                type?: _162.SignedMsgType;
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                timestamp?: Date;
                                validatorAddress?: Uint8Array;
                                validatorIndex?: number;
                                signature?: Uint8Array;
                            };
                            totalVotingPower?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            validatorPower?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            timestamp?: Date;
                        };
                        lightClientAttackEvidence?: {
                            conflictingBlock?: {
                                signedHeader?: {
                                    header?: {
                                        version?: {
                                            block?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long").default) => import("long").default;
                                                and?: (other: string | number | import("long").default) => import("long").default;
                                                compare?: (other: string | number | import("long").default) => number;
                                                comp?: (other: string | number | import("long").default) => number;
                                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                                equals?: (other: string | number | import("long").default) => boolean;
                                                eq?: (other: string | number | import("long").default) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                                gt?: (other: string | number | import("long").default) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                gte?: (other: string | number | import("long").default) => boolean;
                                                ge?: (other: string | number | import("long").default) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long").default) => boolean;
                                                lt?: (other: string | number | import("long").default) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                lte?: (other: string | number | import("long").default) => boolean;
                                                le?: (other: string | number | import("long").default) => boolean;
                                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                                mod?: (other: string | number | import("long").default) => import("long").default;
                                                rem?: (other: string | number | import("long").default) => import("long").default;
                                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                negate?: () => import("long").default;
                                                neg?: () => import("long").default;
                                                not?: () => import("long").default;
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long").default) => boolean;
                                                neq?: (other: string | number | import("long").default) => boolean;
                                                ne?: (other: string | number | import("long").default) => boolean;
                                                or?: (other: string | number | import("long").default) => import("long").default;
                                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                shl?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                shr?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                shru?: (numBits: number | import("long").default) => import("long").default;
                                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long").default;
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long").default;
                                                xor?: (other: string | number | import("long").default) => import("long").default;
                                            };
                                            app?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long").default) => import("long").default;
                                                and?: (other: string | number | import("long").default) => import("long").default;
                                                compare?: (other: string | number | import("long").default) => number;
                                                comp?: (other: string | number | import("long").default) => number;
                                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                                equals?: (other: string | number | import("long").default) => boolean;
                                                eq?: (other: string | number | import("long").default) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                                gt?: (other: string | number | import("long").default) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                gte?: (other: string | number | import("long").default) => boolean;
                                                ge?: (other: string | number | import("long").default) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long").default) => boolean;
                                                lt?: (other: string | number | import("long").default) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                lte?: (other: string | number | import("long").default) => boolean;
                                                le?: (other: string | number | import("long").default) => boolean;
                                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                                mod?: (other: string | number | import("long").default) => import("long").default;
                                                rem?: (other: string | number | import("long").default) => import("long").default;
                                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                negate?: () => import("long").default;
                                                neg?: () => import("long").default;
                                                not?: () => import("long").default;
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long").default) => boolean;
                                                neq?: (other: string | number | import("long").default) => boolean;
                                                ne?: (other: string | number | import("long").default) => boolean;
                                                or?: (other: string | number | import("long").default) => import("long").default;
                                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                shl?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                shr?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                shru?: (numBits: number | import("long").default) => import("long").default;
                                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long").default;
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long").default;
                                                xor?: (other: string | number | import("long").default) => import("long").default;
                                            };
                                        };
                                        chainId?: string;
                                        height?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        time?: Date;
                                        lastBlockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        lastCommitHash?: Uint8Array;
                                        dataHash?: Uint8Array;
                                        validatorsHash?: Uint8Array;
                                        nextValidatorsHash?: Uint8Array;
                                        consensusHash?: Uint8Array;
                                        appHash?: Uint8Array;
                                        lastResultsHash?: Uint8Array;
                                        evidenceHash?: Uint8Array;
                                        proposerAddress?: Uint8Array;
                                    };
                                    commit?: {
                                        height?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        signatures?: {
                                            blockIdFlag?: _162.BlockIDFlag;
                                            validatorAddress?: Uint8Array;
                                            timestamp?: Date;
                                            signature?: Uint8Array;
                                        }[];
                                    };
                                };
                                validatorSet?: {
                                    validators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        proposerPriority?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                    }[];
                                    proposer?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        proposerPriority?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                    };
                                    totalVotingPower?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                };
                            };
                            commonHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            byzantineValidators?: {
                                address?: Uint8Array;
                                pubKey?: {
                                    ed25519?: Uint8Array;
                                    secp256k1?: Uint8Array;
                                };
                                votingPower?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                proposerPriority?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            }[];
                            totalVotingPower?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            timestamp?: Date;
                        };
                    }[];
                };
                lastCommit?: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    round?: number;
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    signatures?: {
                        blockIdFlag?: _162.BlockIDFlag;
                        validatorAddress?: Uint8Array;
                        timestamp?: Date;
                        signature?: Uint8Array;
                    }[];
                };
            }): _159.Block;
        };
    };
    const version: {
        App: {
            encode(message: _164.App, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _164.App;
            fromPartial(object: {
                protocol?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                software?: string;
            }): _164.App;
        };
        Consensus: {
            encode(message: _164.Consensus, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _164.Consensus;
            fromPartial(object: {
                block?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                app?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
            }): _164.Consensus;
        };
    };
}
